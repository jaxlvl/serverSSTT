# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dmsP49YcGZ2cr-JvDxfs_Ki8fC3jM1lU
"""

# prompt: a code que lea una base de datos, haga un análisis estadístico, y ejecute k-means, mostrando plots de los clusters

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
!pip install --upgrade pandas numpy matplotlib scikit-learn

# Reemplaza 'tu_archivo.csv' con el nombre real de tu archivo
try:
  data = pd.read_csv('tu_archivo.csv')
except FileNotFoundError:
  print("Error: Archivo 'tu_archivo.csv' no encontrado. Asegúrate de subirlo a tu entorno de Colab o especificar la ruta correcta.")
  exit()

# Selecciona las columnas numéricas para el análisis y el clustering
numeric_columns = data.select_dtypes(include=np.number).columns

# Manejo de valores faltantes (NaN)
data = data.dropna(subset=numeric_columns)


# Análisis estadístico básico
print("Estadísticas descriptivas:")
print(data.describe())

# Escalamiento de datos (importante para k-means)
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data[numeric_columns])

# Ejecución de k-means (ajusta el valor de n_clusters)
n_clusters = 3  # Número de clusters
kmeans = KMeans(n_clusters=n_clusters, random_state=0, n_init=10)
kmeans.fit(scaled_data)

# Asignación de etiquetas de cluster a los datos originales
data['cluster'] = kmeans.labels_

# Visualización de los clusters (para 2 o 3 dimensiones)
if len(numeric_columns) >= 2:
    plt.figure(figsize=(8, 6))
    if len(numeric_columns) == 2:
        plt.scatter(data[numeric_columns[0]], data[numeric_columns[1]], c=data['cluster'], cmap='viridis')
        plt.xlabel(numeric_columns[0])
        plt.ylabel(numeric_columns[1])
    elif len(numeric_columns) == 3:
        from mpl_toolkits.mplot3d import Axes3D
        fig = plt.figure(figsize=(8, 6))
        ax = fig.add_subplot(111, projection='3d')
        ax.scatter(data[numeric_columns[0]], data[numeric_columns[1]], data[numeric_columns[2]], c=data['cluster'], cmap='viridis')
        ax.set_xlabel(numeric_columns[0])
        ax.set_ylabel(numeric_columns[1])
        ax.set_zlabel(numeric_columns[2])
    else:
      print("Para visualizar en un gráfico, se requieren 2 o 3 columnas numéricas")

    plt.title(f'Clusters k-means (k={n_clusters})')
    plt.show()

# Imprime los centroides de cada cluster
print("\nCentroides de los clusters:")
print(scaler.inverse_transform(kmeans.cluster_centers_))

print("\nNúmero de elementos en cada cluster:")
print(data['cluster'].value_counts())

